import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useState } from "react";
import { FeaturedProductType } from "../../Types/types";

interface Props {
  products: FeaturedProductType[];
}

const Shop: NextPage<Props> = ({ products }) => {
  const router = useRouter();
  const { push } = useRouter();
  const [searchQ, setSearchQ] = useState("");

  const onSearchSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    push({
      pathname: "/shop",
      query: {
        ...router.query,
        q: searchQ,
      },
    });

    setSearchQ("");
  };


  return (
    <>
      <Head>
        <title>Store</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>


      <div className="bg0 m-t-23 p-b-140">
        <div className="container">
          <div className="flex-w flex-sb-m p-b-52">
            <div className="flex-w flex-l-m filter-tope-group m-tb-10">
              <button
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${!Object.keys(router.query).length ? 'how-active1' : ''}`}
                data-filter="*"
                onClick={() => {
                  router.push({
                    pathname: '/shop',
                  });
                }}


              >
                All Products
              </button>

              <button
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${router.query.gender === 'women' ? 'how-active1' : ''}`}
                data-filter=".women" onClick={() => {
                  router.push({
                    pathname: '/shop',
                    query: {
                      gender: "women"

                    }
                  });
                }}
              >
                Women
              </button>

              <button className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${router.query.gender === 'man' ? 'how-active1' : ''}`} data-filter=".men" onClick={() => {
                router.push({
                  pathname: '/shop',
                  query: {
                    gender: "man"

                  }
                });
              }}>
                Men
              </button>

              <button className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${router.query.q === 'belt' ? 'how-active1' : ''}`} data-filter=".bag" onClick={() => {
                router.push({
                  pathname: '/shop',
                  query: {
                    q: "belt"

                  }
                });
              }}>
                Belt
              </button>

              <button
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${router.query.q === 'shoes' ? 'how-active1' : ''}`}
                data-filter=".shoes" onClick={() => {
                  router.push({
                    pathname: '/shop',
                    query: {
                      q: "shoes"
                    }
                  });
                }}
              >
                Shoes
              </button>

              <button
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${router.query.q === 'watch' ? 'how-active1' : ''}`}
                data-filter=".watches" onClick={() => {
                  router.push({
                    pathname: '/shop',
                    query: {
                      q: "watch"
                    }
                  });
                }}
              >
                Watches
              </button>
            </div>

            <div className="flex-w flex-c-m m-tb-10">
              <div className="flex-c-m stext-106 cl6 size-105 bor4 pointer hov-btn3 trans-04 m-tb-4 js-show-search show-search" onClick={onSearchSubmit}>
                <i className="icon-search cl2 m-r-6 fs-15 trans-04 zmdi zmdi-search"></i>
                Search
              </div>
            </div>

            {/* search */}
            <div className="panel-search w-full p-t-10 p-b-15">
              <div className="bor8 dis-flex p-l-15">
                <button className="size-113 flex-c-m fs-16 cl2 hov-cl1 trans-04">
                  <i className="zmdi zmdi-search"></i>
                </button>

                <input
                  className="mtext-107 cl2 size-114 plh2 p-r-15"
                  type="text"
                  name="search-product"
                  placeholder="Search"
                  value={searchQ}
                  onChange={e => setSearchQ(e.target.value)}
                />
              </div>
            </div>
          </div>

          <div className="row isotope-grid">

            {!products.length && (
              <div className="mr-auto ml-auto">
                There are no results for your search.
              </div>
            )}

            {products && products.map((product) => {
              return (
                <div key={product.id} className="col-sm-6 col-md-4 col-lg-3 p-b-35 isotope-item women">
                  <div className="block2">
                    <div className="block2-pic hov-img0">
                      <img src={product.img} alt={product.title} />
                      <a
                        href={`/shop/${product.id}`}
                        className="block2-btn flex-c-m stext-103 cl2 size-102 bg0 bor2 hov-btn1 p-lr-15 trans-04 js-show-modal1"
                      >
                        View Details
                      </a>
                    </div>

                    <div className="block2-txt flex-w flex-t p-t-14">
                      <div className="block2-txt-child1 flex-col-l ">
                        <a
                          href={`/shop/${product.id}`}
                          className="stext-104 cl4 hov-cl1 trans-04 js-name-b2 p-b-6"
                        >
                          {product.title}
                        </a>

                        <span className="stext-105 cl3">{product.price}</span>
                      </div>
                    </div>
                  </div>
                </div>
              )
            })}

          </div>


          {!!products.length &&
            (
              <div className="flex-l-m flex-w w-full p-t-10 m-lr--7">
                <a href="#" className="flex-c-m how-pagination1 trans-04 m-all-7 active-pagination1">
                  1
                </a>

                <a href="#" className="flex-c-m how-pagination1 trans-04 m-all-7">
                  2
                </a>

                <a href="#" className="flex-c-m how-pagination1 trans-04 m-all-7">
                  3
                </a>
              </div>
            )
          }


        </div>
      </div>
    </>
  );
};

export default Shop;

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  const { gender, q } = query;

  let productsRes;

  if (gender && q) {
    productsRes = await fetch(
      `http://localhost:5001/products?gender_like=${gender}&q=${q}`,
    );
  } else if (gender) {
    productsRes = await fetch(`http://localhost:5001/products?gender_like=${gender}`)
  } else if (q) {
    productsRes = await fetch(`http://localhost:5001/products?q=${q}`)
  } else {
    productsRes = await fetch(
      `http://localhost:5001/products`);
  }

  const products: FeaturedProductType[] = await productsRes.json();
  return {
    props: {
      products,
    }
  }
}
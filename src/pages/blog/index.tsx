import type { GetServerSideProps, GetStaticPaths, GetStaticProps, NextPage } from "next";
import Head from "next/head";

import { useRouter } from "next/router";
import React, { useState } from "react";
import BlogItem from "../../components/BlogItem";
import PageTitle from "../../components/PageTitle";
import { FeaturedBlogType } from "../../Types/types";

interface Props {
  featuredBlogs: FeaturedBlogType[];
}

const Blog: NextPage<Props> = ({ featuredBlogs }) => {
  const router = useRouter();
  const { push } = useRouter();
  const [searchQ, setSearchQ] = useState("");

  const onSearchSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    push({
      pathname: "/blog",
      query: {
        ...router.query,
        q: searchQ,
      },
    });

    setSearchQ("");
  };

  return (
    <>
      <Head>
        <title>Store - Blog</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <PageTitle title="Blog" />

      <section className="bg0 p-t-62 p-b-60">
        <div className="container">
          <div className="row">
            <div className="col-md-8 col-lg-9 p-b-80">
              <div className="p-r-45 p-r-0-lg">
                {/* blog item */}

                {!featuredBlogs.length && (
                  <div className="text-center">
                    There are no results for your search.
                  </div>
                )}

                {featuredBlogs && featuredBlogs.map((featuredBlog) => {
                  return (
                    <BlogItem key={featuredBlog.id} featuredBlog={featuredBlog} />
                  )
                })}

              </div>
            </div>

            <div className="col-md-4 col-lg-3 p-b-80">
              <div className="side-menu">
                <form className="bor17 of-hidden pos-relative"
                  onSubmit={onSearchSubmit}
                >
                  <input
                    className="stext-103 cl2 plh4 size-116 p-l-28 p-r-55"
                    type="text"
                    name="search"
                    placeholder="Search"
                    value={searchQ}
                    onChange={e => setSearchQ(e.target.value)}
                  />

                  <button className="flex-c-m size-122 ab-t-r fs-18 cl4 hov-cl1 trans-04">
                    <i className="zmdi zmdi-search"></i>
                  </button>
                </form>

                <div className="p-t-55">
                  <h4 className="mtext-112 cl2 p-b-33">Categories</h4>

                  <ul>
                    <li className="bor18 ">
                      <button className={`dis-block stext-115 cl6 hov-cl1 trans-04 p-tb-8 p-lr-4 ${router.query.category === "fashion" ? "mainBlueActiveClass" : ""} `}

                        onClick={() => {
                          router.push({
                            pathname: '/blog',
                            query: {

                              category: "fashion"
                            }
                          });
                        }}

                      >
                        Fashion
                      </button>
                    </li>

                    <li className="bor18">
                      <button className={`dis-block stext-115 cl6 hov-cl1 trans-04 p-tb-8 p-lr-4 ${router.query.category === "beauty" ? "mainBlueActiveClass" : ""} `}
                        onClick={() => {
                          router.push({
                            pathname: '/blog',
                            query: {

                              category: "beauty"
                            }
                          });
                        }}>
                        Beauty
                      </button>
                    </li>

                    <li className="bor18">
                      <button className={`dis-block stext-115 cl6 hov-cl1 trans-04 p-tb-8 p-lr-4 ${router.query.category === "streetstyle" ? "mainBlueActiveClass" : ""} `}
                        onClick={() => {
                          router.push({
                            pathname: '/blog',
                            query: {

                              category: "streetstyle"
                            }
                          });
                        }}>
                        Street Style
                      </button>
                    </li>

                    <li className="bor18">
                      <button className={`dis-block stext-115 cl6 hov-cl1 trans-04 p-tb-8 p-lr-4 ${router.query.category === "lifestyle" ? "mainBlueActiveClass" : ""} `}
                        onClick={() => {
                          router.push({
                            pathname: '/blog',
                            query: {

                              category: "lifestyle"
                            }
                          });
                        }}>
                        Life Style
                      </button>
                    </li>

                    <li className="bor18">
                      <button className={`dis-block stext-115 cl6 hov-cl1 trans-04 p-tb-8 p-lr-4 ${router.query.category === "diy" ? "mainBlueActiveClass" : ""} `}
                        onClick={() => {
                          router.push({
                            pathname: '/blog',
                            query: {

                              category: "diy"
                            }
                          });
                        }}>
                        DIY & Crafts
                      </button>
                    </li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
    </>
  );
};

export default Blog;

export const getServerSideProps: GetServerSideProps = async ({ query }) => {

  const { category, q } = query;

  let blogRes;


  if (category && q) {
    blogRes = await fetch(
      `http://localhost:5001/blogs?category_like=${category}&q=${q}`);
  } else if (category) {
    blogRes = await fetch(
      `http://localhost:5001/blogs?category_like=${category}`);
  } else if (q) {
    blogRes = await fetch(
      `http://localhost:5001/blogs?q=${q}`);
  } else {
    blogRes = await fetch(
      `http://localhost:5001/blogs`);
  }

  const featuredBlogs: FeaturedBlogType[] = await blogRes.json();

  return {
    props: {
      featuredBlogs,
    },
  };
};






